/**
 * binomial_distribution.cpp
 * C++11 binomial_distribution
 * Compilation: g++ -o binomial_distribution binomial_distribution.cpp -std=c++11
 * Created: 2015-10-11
 */

#include <iostream>
#include <random>
#include <vector>
#include <string>

using std::cout;
using std::endl;
using std::string;
using std::vector;
using std::default_random_engine;
using std::binomial_distribution;

/*
 *******************************************************************************
 *          Distribution Operations
 * Dist d;    Default constructor; makes d ready to use. Other constructors
 *            depend on the type of Dist; The distribution constructors are
 *            explicit.
 * d(e)       Successive calls with the same e produce a sequence of random
 *            numbers according to the distribution type of d; e is a
 *            random-number engine object.
 * d.min()    Return the smallest and largest numbers d(e) will generate.
 * d.max()
 * d.reset()  Reestablish the state of d so that subsequent uses of d don't
 *            depend on values d has already generated.
 *******************************************************************************
 *
 *******************************************************************************
 * template < class IntType = int >         (since C++11)
 * class binomial_distribution;
 *  Produces random non-negative integer values i, distributed according to
 *  Binomial Distribution. The value obtained is the number of successes in a
 *  sequence of t yes/no experiments, each of which succeeds with probability p.
 * IntType - the reuslt type generated by the generator. The effect is undefined
 *           if this is not one of short, int, long, long long, unsigned short,
 *           unsigned int, unsigned long, or unsigned long long.
 *******************************************************************************
 */

int main()
{
    default_random_engine e;    // generates unsigned random integers
    binomial_distribution<int> b(4, 0.5);    // 4 times, probability 0.5 
    // print the binomial distribution parameters
    cout << "p: " << b.p() << " t: " << b.t() << endl;
    vector<unsigned> hist(5);   // five elements each 0
    for (size_t i = 0; i < 100; ++i) {
        ++hist[b(e)];           // count how often each number appears
    }
    for (size_t i = 0; i < hist.size(); ++i) {
        cout << i << ": " << string(hist[i], '*') << endl;
    }

    return 0;
}
