/**
 * inserter.cpp
 * Compilation: g++ -o inserter inserter.cpp -std=c++11
 * Created: 2015-09-19
 */

#include <iostream>
#include <iterator>
#include <list>
#include <algorithm>

using std::cout;
using std::endl;
using std::inserter;
using std::back_inserter;
using std::front_inserter;
using std::list;
using std::copy;

/*
 * Three kinds of inserters:
 *  #1 back_inserter creates an iterator that uses push_back.
 *  #2 front_inserter creates an iterator that uses push_front.
 *  #3 inserter creates an iterator that uses insert. This function takes a
 *     second argument, which must be an iterator into the given container.
 *     Elements are inserted ahead of the element denoted by the given iterator.
 *
 * Note:
 *  We can use front_inserter only if the container has push_front.
 *  Similarly, we can use back_inserter only if it has push_back.
 *
 * Inserter Iterator Operations
 * it = t           Inserts the value t at the current position denoted by it.
 *                  Depending on the kind of insert iterator, and assuming c is
 *                  the container to which it is bound, calls c.push_back(t),
 *                  c.push_front(t), or c.insert(t, p), where p is the iterator
 *                  position given to inserter.
 * *it, ++it, it++  These operations exist but do nothing to it. Each operator
 *                  returns it.
 *
 * It is important to understand that when we call inserter(c, iter), we get an
 * iterator that, when used successively, inserts elements ahead of the element
 * originally denoted by iter. That is, if it is an iterator generated by
 * inserter, then an assignment such as
 *      *it = val;
 * behaves as
 *      it = c.insert(it, val); // it points to the newly added element
 *      ++it; // increment it so that it denotes the same element as before
 */


int main(void)
{
    list<int> lst{1, 2, 3, 4};
    list<int> lst1, lst2, lst3;   // empty lists
    // after copy completes, lst1 contains 1 2 3 4
    copy(lst.cbegin(), lst.cend(), back_inserter(lst1));
    for (const auto i : lst1)
        cout << i << ' ';
    cout << endl;
    // after copy completes, lst2 contains 4 3 2 1
    copy(lst.cbegin(), lst.cend(), front_inserter(lst2));
    for (const auto i : lst2)
        cout << i << ' ';
    cout << endl;
    // after copy completes, lst3 contains 1 2 3 4
    copy(lst.cbegin(), lst.cend(), inserter(lst3, lst3.begin()));
    for (const auto i : lst3)
        cout << i << ' ';
    cout << endl;

    return 0;
}
